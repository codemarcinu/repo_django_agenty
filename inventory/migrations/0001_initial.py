# Generated by Django 5.2.5 on 2025-08-15 13:35

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('purchase_date', models.DateField(help_text='Date when the product was purchased')),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date (calculated or manual)', null=True)),
                ('quantity_remaining', models.DecimalField(decimal_places=3, help_text='Current remaining quantity', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('unit', models.CharField(choices=[('szt', 'Sztuki'), ('kg', 'Kilogramy'), ('g', 'Gramy'), ('l', 'Litry'), ('ml', 'Mililitry'), ('opak', 'Opakowania')], default='szt', max_length=10)),
                ('storage_location', models.CharField(choices=[('fridge', 'Lodówka'), ('freezer', 'Zamrażarka'), ('pantry', 'Spiżarnia'), ('cabinet', 'Szafka'), ('other', 'Inne')], default='pantry', max_length=20)),
                ('batch_id', models.CharField(blank=True, default='', help_text='Batch identifier for tracking', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Additional metadata like expiry_days for automatic expiry calculation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='inventory.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='ConsumptionEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('consumed_qty', models.DecimalField(decimal_places=3, help_text='Quantity consumed', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('consumed_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the consumption occurred')),
                ('notes', models.TextField(blank=True, default='', help_text='Optional notes about consumption')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inventory_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consumption_events', to='inventory.inventoryitem')),
            ],
            options={
                'ordering': ['-consumed_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=300)),
                ('brand', models.CharField(blank=True, default='', max_length=100)),
                ('barcode', models.CharField(blank=True, db_index=True, default='', help_text='EAN/UPC barcode for exact matching', max_length=50)),
                ('nutrition', models.JSONField(blank=True, default=dict, help_text='Nutritional information from OpenFoodFacts API')),
                ('aliases', models.JSONField(blank=True, default=list, help_text='Alternative names and variations for fuzzy matching')),
                ('is_active', models.BooleanField(default=True, help_text="False for 'ghost' products created from unmatched receipt items")),
                ('reorder_point', models.DecimalField(decimal_places=3, default=Decimal('1.000'), help_text='Minimum quantity before reorder alert', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='inventory.category')),
            ],
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='inventory.product'),
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('store_name', models.CharField(blank=True, default='', max_length=200)),
                ('purchased_at', models.DateTimeField(help_text='Date and time when the receipt was issued')),
                ('total', models.DecimalField(decimal_places=2, help_text='Total amount from receipt', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('currency', models.CharField(choices=[('PLN', 'Polish Złoty'), ('EUR', 'Euro'), ('USD', 'US Dollar')], default='PLN', max_length=3)),
                ('raw_text', models.JSONField(blank=True, default=dict, help_text='Raw OCR output with confidence scores and metadata')),
                ('source_file_path', models.CharField(help_text='Path to original receipt file', max_length=500)),
                ('status', models.CharField(choices=[('pending_ocr', 'Pending OCR'), ('ocr_processing', 'OCR in Progress'), ('ocr_completed', 'OCR Completed'), ('parsing', 'Parsing Items'), ('matching', 'Matching Products'), ('completed', 'Completed'), ('error', 'Error')], default='pending_ocr', max_length=20)),
                ('processing_notes', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['store_name'], name='inventory_r_store_n_53342f_idx'), models.Index(fields=['purchased_at'], name='inventory_r_purchas_b3e0fc_idx'), models.Index(fields=['status'], name='inventory_r_status_7edf07_idx'), models.Index(fields=['created_at'], name='inventory_r_created_ecdece_idx')],
            },
        ),
        migrations.CreateModel(
            name='ReceiptLineItem',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('product_name', models.CharField(db_index=True, help_text='Original product name from receipt', max_length=300)),
                ('quantity', models.DecimalField(decimal_places=3, help_text='Quantity purchased', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('line_total', models.DecimalField(decimal_places=2, help_text='Total for this line item', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('vat_code', models.CharField(blank=True, choices=[('A', 'VAT A'), ('B', 'VAT B'), ('C', 'VAT C'), ('D', 'VAT D'), ('', 'Unknown')], default='', max_length=1)),
                ('meta', models.JSONField(blank=True, default=dict, help_text='Additional parsing metadata and original text fragments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('matched_product', models.ForeignKey(blank=True, help_text='Matched product from catalog', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='receipt_items', to='inventory.product')),
                ('receipt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='inventory.receipt')),
            ],
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name'], name='inventory_c_name_546ce4_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent'], name='inventory_c_parent__a38b2c_idx'),
        ),
        migrations.AddIndex(
            model_name='consumptionevent',
            index=models.Index(fields=['inventory_item'], name='inventory_c_invento_f24bce_idx'),
        ),
        migrations.AddIndex(
            model_name='consumptionevent',
            index=models.Index(fields=['consumed_at'], name='inventory_c_consume_7fcf10_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['name'], name='inventory_p_name_f6a6a1_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['barcode'], name='inventory_p_barcode_3a77e5_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_active'], name='inventory_p_is_acti_47a270_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='inventory_p_categor_607069_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['product'], name='inventory_i_product_8c36d3_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['purchase_date'], name='inventory_i_purchas_3b5953_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['expiry_date'], name='inventory_i_expiry__69d012_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['quantity_remaining'], name='inventory_i_quantit_1ffc8d_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['storage_location'], name='inventory_i_storage_467982_idx'),
        ),
        migrations.AddIndex(
            model_name='receiptlineitem',
            index=models.Index(fields=['receipt'], name='inventory_r_receipt_0ad33f_idx'),
        ),
        migrations.AddIndex(
            model_name='receiptlineitem',
            index=models.Index(fields=['product_name'], name='inventory_r_product_890182_idx'),
        ),
        migrations.AddIndex(
            model_name='receiptlineitem',
            index=models.Index(fields=['matched_product'], name='inventory_r_matched_9a7bea_idx'),
        ),
    ]

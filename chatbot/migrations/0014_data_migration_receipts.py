# Generated by Django 5.2.5 on 2025-08-17 19:56

from django.db import migrations, models
from django.db.models import F
from django.utils import timezone
from decimal import Decimal
import logging

logger = logging.getLogger(__name__)

def migrate_receipt_processing_to_receipt(apps, schema_editor):
    ReceiptProcessing = apps.get_model('chatbot', 'ReceiptProcessing')
    Receipt = apps.get_model('inventory', 'Receipt')

    total_receipts = ReceiptProcessing.objects.count()
    logger.info(f'Found {total_receipts} ReceiptProcessing records to migrate')

    if total_receipts == 0:
        logger.info('No ReceiptProcessing records to migrate.')
        return

    migrated_count = 0
    skipped_count = 0
    error_count = 0

    for receipt_processing in ReceiptProcessing.objects.all():
        try:
            # Check if already migrated based on source_file_path (assuming unique)
            existing = Receipt.objects.filter(
                source_file_path=receipt_processing.receipt_file.name if receipt_processing.receipt_file else ''
            ).first()
            
            if existing:
                logger.info(f'Skipping already migrated ReceiptProcessing {receipt_processing.id}')
                skipped_count += 1
                continue

            # Map status
            status_mapping = {
                'uploaded': 'uploaded',
                'ocr_in_progress': 'processing_ocr', # Map to new unified status
                'ocr_done': 'ocr_completed', # Map to new unified status
                'llm_in_progress': 'llm_in_progress',
                'llm_done': 'parsing_completed', # Map to new unified status
                'ready_for_review': 'ready_for_review',
                'completed': 'completed',
                'error': 'error',
            }
            new_status = status_mapping.get(receipt_processing.status, 'uploaded')

            # Extract store name and total from extracted_data if available
            store_name = ''
            total_amount = None
            if receipt_processing.extracted_data:
                store_name = receipt_processing.extracted_data.get('store_name', '')
                total_str = receipt_processing.extracted_data.get('total_amount')
                if total_str:
                    try:
                        total_amount = Decimal(str(total_str))
                    except (ValueError, TypeError):
                        logger.warning(f"Could not convert total_amount '{total_str}' for receipt {receipt_processing.id}")
                        total_amount = None

            # Create new unified Receipt
            unified_receipt = Receipt.objects.create(
                receipt_file=receipt_processing.receipt_file,
                status=new_status,
                raw_ocr_text=receipt_processing.raw_ocr_text,
                extracted_data=receipt_processing.extracted_data,
                error_message=receipt_processing.error_message,
                uploaded_at=receipt_processing.uploaded_at,
                processed_at=receipt_processing.processed_at,
                
                store_name=store_name,
                purchased_at=receipt_processing.uploaded_at, # Fallback to uploaded_at
                total=total_amount,
                currency='PLN', # Default currency
                source_file_path=receipt_processing.receipt_file.name if receipt_processing.receipt_file else '',
                processing_notes=f'Migrated from ReceiptProcessing ID: {receipt_processing.id}',
                
                created_at=receipt_processing.uploaded_at,
                updated_at=timezone.now(),
            )
            migrated_count += 1
            logger.info(f'Migrated ReceiptProcessing {receipt_processing.id} -> Receipt {unified_receipt.id}')
            
        except Exception as e:
            error_count += 1
            logger.error(f'Error migrating ReceiptProcessing {receipt_processing.id}: {e}', exc_info=True)

    logger.info(f'Migration summary: Migrated: {migrated_count}, Skipped: {skipped_count}, Errors: {error_count}')

class Migration(migrations.Migration):

    dependencies = [
        ('chatbot', '0013_remove_pantryitem'),
        ('inventory', '0004_receipt_error_message_receipt_extracted_data_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_receipt_processing_to_receipt),
    ]
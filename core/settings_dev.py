"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import os

import environ

env = environ.Env()

# Read .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_spectacular",  # API documentation
    "channels",  # WebSocket support for real-time updates
    "chatbot",
    "inventory",  # New inventory app for receipt processing pipeline
    "pytest_django",  # Added
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration with automatic fallback
from .database_config import get_database_config

DATABASES = get_database_config(BASE_DIR, env)


# Password validation strengthened below in security section


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# OpenWeatherMap API Key
OPENWEATHERMAP_API_KEY = env("OPENWEATHERMAP_API_KEY")

# Celery Configuration
# Note: If Redis is not available, Celery tasks will fail gracefully
# and the application will fallback to synchronous processing
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_TASK_ALWAYS_EAGER = (
    False  # Set to True to run tasks synchronously when debugging
)

# Celery Beat Configuration (Periodic Tasks)
CELERY_BEAT_SCHEDULE = {
    "check-inventory-alerts": {
        "task": "chatbot.tasks_alerts.check_inventory_alerts",
        "schedule": 86400.0,  # Run daily (24 hours in seconds)
        # 'schedule': 60.0,  # For testing: run every minute
    },
    "manage-alias-reputation": {
        "task": "inventory.tasks.manage_alias_reputation",
        "schedule": 86400.0,  # Run daily
    },
}
CELERY_TIMEZONE = "UTC"

# Alias Management Settings
ALIAS_CONFIRMATION_THRESHOLD = 10  # Number of times an alias must be seen to be promoted to 'confirmed'
ALIAS_EXPIRATION_DAYS = 90       # Number of days after which an unverified alias with count 1 is pruned

# Django REST Framework Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",  # Allow uploads without auth for now
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "100/hour", "user": "1000/hour"},
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# API Documentation
SPECTACULAR_SETTINGS = {
    "TITLE": "Receipt Processing API",
    "DESCRIPTION": "API for uploading and processing receipt files",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

# Cache Configuration with Redis fallback
try:
    import redis

    # Test Redis connection
    r = redis.Redis(host="127.0.0.1", port=6379, db=1)
    r.ping()
    # Redis is available
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/1",
            "KEY_PREFIX": "agenty_dev",
            "TIMEOUT": 300,  # 5 minutes default timeout
        }
    }
except (ImportError, redis.ConnectionError, Exception):
    # Fallback to database cache when Redis is not available
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.db.DatabaseCache",
            "LOCATION": "cache_table",
            "TIMEOUT": 300,
            "KEY_PREFIX": "agenty_dev",
        }
    }

# Session configuration
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Database query caching
DATABASE_ROUTERS = []

# Comprehensive logging configuration for debugging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "detailed": {
            "format": "[{asctime}] {levelname} in {name}: {message}",
            "style": "{",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "detailed",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "django_debug.log",
            "formatter": "verbose",
        },
        "receipt_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "receipt_processing.log",
            "formatter": "detailed",
        },
        "pipeline_diagnostic_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "pipeline_diagnostic.log",
            "formatter": "detailed",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "chatbot": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": True,
        },
        "chatbot.receipt_processor": {
            "handlers": ["console", "receipt_file"],
            "level": "DEBUG",
            "propagate": False,  # Don't duplicate in parent loggers
        },
        "chatbot.services.receipt_service": {
            "handlers": ["console", "receipt_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "chatbot.views": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": True,
        },
        "chatbot.tasks": {
            "handlers": ["console", "receipt_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "receipt_pipeline_diag": {
            "handlers": ["console", "pipeline_diagnostic_file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Create logs directory if it doesn't exist
import os

logs_dir = BASE_DIR / "logs"
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)

# OCR Configuration
OCR_CONFIG = {
    "enable_easyocr": True,
    "enable_tesseract": True,
    "easyocr_languages": ["pl", "en"],
    "tesseract_language": "pol+eng",
    "fallback_enabled": True,
    "confidence_threshold": 0.5,  # Minimum confidence to accept results
}

OCR_QUALITY_THRESHOLD = 80 # Threshold for switching to VisionService
POPPLER_PATH = None
# Email Configuration for Inventory Alerts
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"  # For development
DEFAULT_FROM_EMAIL = "agenty@example.com"
INVENTORY_ALERTS_EMAIL = "admin@example.com"  # Where to send inventory alerts

# Ollama Configuration for Receipt Processing (Updated for RTX 3060 optimization)
RECEIPT_OLLAMA_CONFIG = {
    "ollama_url": "http://127.0.0.1:11434",
    "model": "qwen2:7b",  # Text model for receipt processing
    "timeout": 300,  # Reduced timeout for faster 7B models
    "max_retries": 2,
    "stream": False,
    "auto_routing": True,  # Enable intelligent model routing
    "options": {
        "temperature": 0.1,  # Low temperature for consistent results
        "top_p": 0.9,
        "num_ctx": 4096,  # Context window
        "num_predict": 1024,  # Max response tokens
        "num_gpu": 51,  # Use all GPU layers for RTX 3060
        "num_thread": 6,  # CPU threads
    }
}

# Mistral OCR Configuration
MISTRAL_API_KEY = env("MISTRAL_API_KEY", default="")

# Settings for the standalone VisionService, used in the receipt processing pipeline
OLLAMA_API_BASE_URL = "http://127.0.0.1:11434"
OLLAMA_VISION_MODEL = "qwen2.5-vl:7b"

# Security settings for development (some disabled for local dev)
# Note: These should be enabled in production
if not DEBUG:
    # HTTPS settings (only in production)
    SECURE_SSL_REDIRECT = env.bool("SECURE_SSL_REDIRECT", default=False)
    SECURE_HSTS_SECONDS = env.int("SECURE_HSTS_SECONDS", default=0)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("SECURE_HSTS_INCLUDE_SUBDOMAINS", default=False)
    SECURE_HSTS_PRELOAD = env.bool("SECURE_HSTS_PRELOAD", default=False)

    # Cookie security (only in production with HTTPS)
    SESSION_COOKIE_SECURE = env.bool("SESSION_COOKIE_SECURE", default=False)
    CSRF_COOKIE_SECURE = env.bool("CSRF_COOKIE_SECURE", default=False)
else:
    # Development settings
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# General security headers (always enabled)
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# CSRF Protection
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Strict'
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'

# Session Security
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

# Password validation strengthening
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,  # Increased from default 8
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# File upload security
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# Restrict file upload types for receipts
ALLOWED_RECEIPT_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.pdf', '.webp']
MAX_RECEIPT_FILE_SIZE = 10 * 1024 * 1024  # 10MB

# Django Channels Configuration
ASGI_APPLICATION = "core.asgi.application"

# Channel layer configuration for WebSocket support
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",  # Development only
        # For production, use Redis:
        # "BACKEND": "channels_redis.core.RedisChannelLayer",
        # "CONFIG": {
        #     "hosts": [("127.0.0.1", 6379)],
        # },
    },
}

# MISTRAL_API_KEY is already defined above in the Mistral OCR Configuration section
